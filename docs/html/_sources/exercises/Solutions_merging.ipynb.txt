{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Merging Data to Understand the Relationship between Drug Legalization and Violent Crime\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In recent years, many US states have decided to legalize the use of marijuana. \n",
    "\n",
    "When these ideas were first proposed, there were many theories about the relationship between crime and the \"War on Drugs\" (the term given to US efforts to arrest drug users and dealers over the past several decades). \n",
    "\n",
    "In this exercise, we're going to test a few of those theories using drug arrest data from the state of California. \n",
    "\n",
    "Though California has passed a number of laws lessening penalities for marijuana possession over the years, arguably the biggest changes were in  2010, when the state changed the penalty for possessing a small amount of marijuana from a criminal crime to a \"civil\" penality (meaning those found guilty only had to pay a fine, not go to jail), though possessing, selling, or producing larger quantities remained illegal. Then in 2016, the state fully legalized marijuana for recreational use, not only making possession of small amounts legal, but also creating a regulatory system for producing marijuana for sale. \n",
    "\n",
    "Proponents of drug legalization have long argued that the war on drugs contributes to violent crime by creating an opportunity for drug dealers and organized crime to sell and distribute drugs, a business which tends to generate violence when gangs battle over territory. According to this theory, with drug legalization, we should see violent crime decrease after legalization in places where drug arrests had previously been common. \n",
    "\n",
    "**To be clear,** this is far from the only argument for drug legalization! It is simply the argument we are well positioned to analyze today. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pre-Legalization Analysis\n",
    "\n",
    "**(1)** We will begin by examining [county-level data on arrests from California in 2009](https://github.com/nickeubank/practicaldatascience/tree/master/Example_Data/ca), which is derived from data provided by the Office of the California State Attorney General [here](https://openjustice.doj.ca.gov/data). Download and import the file `ca_arrests_2009.csv`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "arrests_2009 = pd.read_csv(\n",
    "    \"https://raw.githubusercontent.com/nickeubank/practicaldatascience\"\n",
    "    \"/master/Example_Data/ca/ca_arrests_2009.csv\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(2)** Use your data exploration skills to get a feel for this data. If you need to, you can find the [original codebook here](https://data-openjustice.doj.ca.gov/sites/default/files/dataset/2019-07/Arrests%20Context_062119.pdf) (This data is similar, but has been collapsed to one observation per county.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>VIOLENT</th>\n",
       "      <th>PROPERTY</th>\n",
       "      <th>F_DRUGOFF</th>\n",
       "      <th>F_SEXOFF</th>\n",
       "      <th>F_ALLOTHER</th>\n",
       "      <th>F_TOTAL</th>\n",
       "      <th>M_TOTAL</th>\n",
       "      <th>S_TOTAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1682</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4318</td>\n",
       "      <td>4640</td>\n",
       "      <td>5749</td>\n",
       "      <td>260</td>\n",
       "      <td>3502</td>\n",
       "      <td>18469</td>\n",
       "      <td>37247</td>\n",
       "      <td>431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1683</td>\n",
       "      <td>Alpine County</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>83</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1684</td>\n",
       "      <td>Amador County</td>\n",
       "      <td>100</td>\n",
       "      <td>59</td>\n",
       "      <td>101</td>\n",
       "      <td>5</td>\n",
       "      <td>199</td>\n",
       "      <td>464</td>\n",
       "      <td>801</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1685</td>\n",
       "      <td>Butte County</td>\n",
       "      <td>641</td>\n",
       "      <td>602</td>\n",
       "      <td>542</td>\n",
       "      <td>34</td>\n",
       "      <td>429</td>\n",
       "      <td>2248</td>\n",
       "      <td>9026</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1686</td>\n",
       "      <td>Calaveras County</td>\n",
       "      <td>211</td>\n",
       "      <td>83</td>\n",
       "      <td>123</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>501</td>\n",
       "      <td>968</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0            COUNTY  VIOLENT  PROPERTY  F_DRUGOFF  F_SEXOFF  \\\n",
       "0        1682    Alameda County     4318      4640       5749       260   \n",
       "1        1683     Alpine County        8         4          2         1   \n",
       "2        1684     Amador County      100        59        101         5   \n",
       "3        1685      Butte County      641       602        542        34   \n",
       "4        1686  Calaveras County      211        83        123        14   \n",
       "\n",
       "   F_ALLOTHER  F_TOTAL  M_TOTAL  S_TOTAL  \n",
       "0        3502    18469    37247      431  \n",
       "1           1       16       83        0  \n",
       "2         199      464      801        2  \n",
       "3         429     2248     9026        1  \n",
       "4          70      501      968        3  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arrests_2009.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(3)** Figuring out what county has the most violent arrests isn't very meaningful if we don't normalize for size. A county with 10 people and 10 arrests for violent crimes is obviously worse than a county with 1,000,000 people an 11 arrests for violent crime. \n",
    "\n",
    "To address this, also import `nhgis_county_populations.csv` from [the directory we're working from](https://github.com/nickeubank/practicaldatascience/tree/master/Example_Data/ca)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>STATE</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>total_population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Autauga County</td>\n",
       "      <td>49584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Baldwin County</td>\n",
       "      <td>171997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Barbour County</td>\n",
       "      <td>29663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Bibb County</td>\n",
       "      <td>21464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Blount County</td>\n",
       "      <td>56804</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0       YEAR    STATE          COUNTY  total_population\n",
       "0           0  2005-2009  Alabama  Autauga County             49584\n",
       "1           1  2005-2009  Alabama  Baldwin County            171997\n",
       "2           2  2005-2009  Alabama  Barbour County             29663\n",
       "3           3  2005-2009  Alabama     Bibb County             21464\n",
       "4           4  2005-2009  Alabama   Blount County             56804"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop = pd.read_csv(\n",
    "    \"https://raw.githubusercontent.com/nickeubank/practicaldatascience/\"\n",
    "    \"master/Example_Data/ca/nhgis_county_populations.csv\"\n",
    ")\n",
    "pop.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(4)** Use your data exploration skills to get used to this data, and figure out how it relates to your 2009 arrest data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# They're both a the county-state level, but the sample of population is all states, not just CA.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(5)** Once you feel like you have a good sense of the relation between our arrest and population data, merge the two datasets. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is a bad merge, but what most people will likely do:\n",
    "\n",
    "merged = pd.merge(arrests_2009, pop, on=\"COUNTY\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(6)** When you merge data, you have to make some assumptions about the nature of the data you're working with. For example, you have to assume it's OK to connect variables that share the same value of your merging variables. Similarly, you have to make assumptions about whether your merge a 1-to-1 merge (meaning there is only one observation of the variable you're merging on in both datasets), a 1-to-many merge (meaning there is only one observation of the variable you're merging on in the first dataset, but multiple observations in the second). So before running a merge, answer the following questions:\n",
    "\n",
    "a) What variable do you think will be consistent across these two datasets you can use for merging?\n",
    "\n",
    "b) Do you think there will be exactly 1 observation for each value in your arrest data?\n",
    "\n",
    "c) Do you think there will be exactly 1 observation for each value in your population data?\n",
    "\n",
    "Being correct in your assumptions about these things is *very* important. If you think there's only one observation per value of your merging variable in each dataset, but there are in fact 2, you'll end up with two observations for each value after the merge. Moreover, not only is the structure of your data now a mess, but the fact you were wrong means you didn't understand something about your data. \n",
    "\n",
    "Because of the importance of this, `pandas` provides a utility for *testing* these assumptions when you do a merge: the `validate` keyword! Validate will accept `\"1:1\"`, `\"1:m\"`, `\"m:1\"`, and `\"m:m\"`. It will then check to make sure your merge matches the type of merge you think it is. I *highly* recommend always using this option (...and not just because I'm the one who added `validate` to pandas).\n",
    "\n",
    "Repeat the merge you conducted above, but this time use the `validate` to make sure your assumptions about the data were correct. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, we repeat our bad merge, which will now throw an error\n",
    "# because county names repeat across states, AND because we have multiple years in the\n",
    "# data:\n",
    "\n",
    "# commented out so notebook runs:\n",
    "# merged = pd.merge(arrests_2009, pop, on='COUNTY', validate='1:1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop2009 = pop[pop[\"YEAR\"] == \"2005-2009\"].copy()\n",
    "ca_pop2009 = pop2009[pop2009.STATE == \"California\"].copy()\n",
    "merged_2009 = pd.merge(arrests_2009, ca_pop2009, on=\"COUNTY\", validate=\"1:1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(7)** Checking whether you are doing a 1-to-1, many-to-1, 1-to-many, or many-to-many merge is only the first type of diagnostic test you should run on *every* merge you conduct. The second test is to see if you data merged successfully!\n",
    "\n",
    "To help with this, the `merge` function in pandas offers a keyword option called `indicator`. If you set `indicator` to `True`, then pandas will add a column to the result of your merge called `_merge`. This variable will tell you, for each observation in your merged data, whether:  (a) that observation came from a successful merge of both datasets, (b) if that observation was in the left dataset (the first one you passed) but not the right dataset, or (c) if that observation was in the right dataset but not the left). This allows you to quickly identify failed merges!\n",
    "\n",
    "For example, suppose you had the following data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>df1_var</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>key1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>key2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    key  df1_var\n",
       "0  key1        1\n",
       "1  key2        2"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.DataFrame({\"key\": [\"key1\", \"key2\"], \"df1_var\": [1, 2]})\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>df2_var</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>key1</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Key2</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    key df2_var\n",
       "0  key1       a\n",
       "1  Key2       b"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = pd.DataFrame({\"key\": [\"key1\", \"Key2\"], \"df2_var\": [\"a\", \"b\"]})\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now suppose you *expected* that all observations should merge when you merge these datasets (because you hadn't noticed the typo in `df2` where `key2` has a capital `Key2`. If you just run a merge, it works without any problems:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_data = pd.merge(df1, df2, on=\"key\", how=\"outer\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And so you might carry on in life unaware your data is now corrupted: instead of two merged rows, you now have 3, only 1 of which merged correctly!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>df1_var</th>\n",
       "      <th>df2_var</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>key1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>key2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Key2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    key  df1_var df2_var\n",
       "0  key1      1.0       a\n",
       "1  key2      2.0     NaN\n",
       "2  Key2      NaN       b"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When what you really wanted was: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>df1_var</th>\n",
       "      <th>df2_var</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>key1</td>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>key2</td>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    key  df1_var df2_var\n",
       "0  key1        1       a\n",
       "1  key2        2       b"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2_correct = df2.copy()\n",
    "df2_correct.loc[df2.key == \"Key2\", \"key\"] = \"key2\"\n",
    "pd.merge(df1, df2_correct, on=\"key\", how=\"outer\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(in a small dataset, you'd quickly see you have 1 row instead of 2, but if you have millions of rows, a couple missing won't be evident). \n",
    "\n",
    "But now suppose we use the `indicator` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "left_only     1\n",
       "right_only    1\n",
       "both          1\n",
       "Name: _merge, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data = pd.merge(df1, df2, on=\"key\", how=\"outer\", indicator=True)\n",
    "new_data._merge.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We could immediately see that only one observation merged correct, and that one row from each dataset failed to merge!\n",
    "\n",
    "Moreover, we can look at the failed merges:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>key</th>\n",
       "      <th>df1_var</th>\n",
       "      <th>df2_var</th>\n",
       "      <th>_merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>key2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>left_only</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Key2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b</td>\n",
       "      <td>right_only</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    key  df1_var df2_var      _merge\n",
       "1  key2      2.0     NaN   left_only\n",
       "2  Key2      NaN       b  right_only"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data[new_data._merge != \"both\"]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Allowing us to easily diagnose the problem. \n",
    "\n",
    "**Note:** The `pandas` merge function allows users to decide whether to keep only observations that merge (`how='inner'`), all the observations from the first dataset pasted to merge (`how='left'`), all the observations from the second dataset passed to merge (`how='right'`), or all observations (`how='outer'`):\n",
    "\n",
    "![join_types](../images/join-or-merge-in-python-pandas.png)\n",
    "\n",
    "But one danger to using the more restrictive options (like the default, `how='inner'`) is that the merge throws away all the observations that fail to merge, and while this may be the *eventual* goal of your analysis, it means that you don't get to see all the observations that failed to merge that maybe you thought *would* merge. In other words, it throws away the errors so you can't look at them!  \n",
    "\n",
    "So to use `indicator` effectively, you have to:\n",
    "\n",
    "- Not use `how=\"inner\"`, and\n",
    "- Check the values of `_merge` after your merge. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(8)** Now repeat your previous merge using *both* the `validate` keyword *and* the `indicator` keyword with `how='outer'`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "both          56\n",
       "left_only      2\n",
       "right_only     2\n",
       "Name: _merge, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_2009 = pd.merge(\n",
    "    arrests_2009, ca_pop2009, on=\"COUNTY\", validate=\"1:1\", indicator=True, how=\"outer\"\n",
    ")\n",
    "merged_2009._merge.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(9)** You *should* be able to get to the point that all counties in our arrest data merge with population data. Can you figure out why that did not happen? Can you fix the data so that they all merge to population data?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>_merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Del Norte County</td>\n",
       "      <td>left_only</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Inyo County</td>\n",
       "      <td>left_only</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>DelNorte County</td>\n",
       "      <td>right_only</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Injo County</td>\n",
       "      <td>right_only</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              COUNTY      _merge\n",
       "7   Del Norte County   left_only\n",
       "13       Inyo County   left_only\n",
       "58   DelNorte County  right_only\n",
       "59       Injo County  right_only"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_2009.loc[merged_2009._merge != \"both\", [\"COUNTY\", \"_merge\"]]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "both          58\n",
       "left_only      0\n",
       "right_only     0\n",
       "Name: _merge, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ca_pop2009.loc[ca_pop2009.COUNTY == \"DelNorte County\", \"COUNTY\"] = \"Del Norte County\"\n",
    "ca_pop2009.loc[ca_pop2009.COUNTY == \"Injo County\", \"COUNTY\"] = \"Inyo County\"\n",
    "merged_2009 = pd.merge(\n",
    "    arrests_2009, ca_pop2009, on=\"COUNTY\", validate=\"1:1\", indicator=True, how=\"outer\"\n",
    ")\n",
    "merged_2009._merge.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can write this as a test!\n",
    "assert (merged_2009._merge == \"both\").all()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing Arrest Rates\n",
    "\n",
    "**(10)** Now that we have arrest counts and population data, we can calculate arrest *rates*. For each county, create a new variable called `violent_arrest_rate_2009` that is the number of violent arrests for 2009 divided by the population of the county from 2005-2009, and a similar new variable called `drug_arrest_rate_2009` for drug arrests divided by population."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0_x</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>VIOLENT</th>\n",
       "      <th>PROPERTY</th>\n",
       "      <th>F_DRUGOFF</th>\n",
       "      <th>F_SEXOFF</th>\n",
       "      <th>F_ALLOTHER</th>\n",
       "      <th>F_TOTAL</th>\n",
       "      <th>M_TOTAL</th>\n",
       "      <th>S_TOTAL</th>\n",
       "      <th>Unnamed: 0_y</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>STATE</th>\n",
       "      <th>total_population</th>\n",
       "      <th>_merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1682</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4318</td>\n",
       "      <td>4640</td>\n",
       "      <td>5749</td>\n",
       "      <td>260</td>\n",
       "      <td>3502</td>\n",
       "      <td>18469</td>\n",
       "      <td>37247</td>\n",
       "      <td>431</td>\n",
       "      <td>186</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>California</td>\n",
       "      <td>1457095</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1683</td>\n",
       "      <td>Alpine County</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>83</td>\n",
       "      <td>0</td>\n",
       "      <td>187</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>California</td>\n",
       "      <td>1153</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1684</td>\n",
       "      <td>Amador County</td>\n",
       "      <td>100</td>\n",
       "      <td>59</td>\n",
       "      <td>101</td>\n",
       "      <td>5</td>\n",
       "      <td>199</td>\n",
       "      <td>464</td>\n",
       "      <td>801</td>\n",
       "      <td>2</td>\n",
       "      <td>188</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>California</td>\n",
       "      <td>38039</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1685</td>\n",
       "      <td>Butte County</td>\n",
       "      <td>641</td>\n",
       "      <td>602</td>\n",
       "      <td>542</td>\n",
       "      <td>34</td>\n",
       "      <td>429</td>\n",
       "      <td>2248</td>\n",
       "      <td>9026</td>\n",
       "      <td>1</td>\n",
       "      <td>189</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>California</td>\n",
       "      <td>217917</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1686</td>\n",
       "      <td>Calaveras County</td>\n",
       "      <td>211</td>\n",
       "      <td>83</td>\n",
       "      <td>123</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>501</td>\n",
       "      <td>968</td>\n",
       "      <td>3</td>\n",
       "      <td>190</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>California</td>\n",
       "      <td>46548</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0_x            COUNTY  VIOLENT  PROPERTY  F_DRUGOFF  F_SEXOFF  \\\n",
       "0          1682    Alameda County     4318      4640       5749       260   \n",
       "1          1683     Alpine County        8         4          2         1   \n",
       "2          1684     Amador County      100        59        101         5   \n",
       "3          1685      Butte County      641       602        542        34   \n",
       "4          1686  Calaveras County      211        83        123        14   \n",
       "\n",
       "   F_ALLOTHER  F_TOTAL  M_TOTAL  S_TOTAL  Unnamed: 0_y       YEAR       STATE  \\\n",
       "0        3502    18469    37247      431           186  2005-2009  California   \n",
       "1           1       16       83        0           187  2005-2009  California   \n",
       "2         199      464      801        2           188  2005-2009  California   \n",
       "3         429     2248     9026        1           189  2005-2009  California   \n",
       "4          70      501      968        3           190  2005-2009  California   \n",
       "\n",
       "   total_population _merge  \n",
       "0           1457095   both  \n",
       "1              1153   both  \n",
       "2             38039   both  \n",
       "3            217917   both  \n",
       "4             46548   both  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_2009.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_2009[\"violent_arrest_rate_2009\"] = (\n",
    "    merged_2009[\"VIOLENT\"] / merged_2009[\"total_population\"]\n",
    ")\n",
    "merged_2009[\"drug_arrest_rate_2009\"] = (\n",
    "    merged_2009[\"F_DRUGOFF\"] / merged_2009[\"total_population\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(11)** Make a scatter plot that shows the relationship between each county's violent arrest rate and it's drug arrest rate. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (671392522)>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from plotnine import *\n",
    "\n",
    "(\n",
    "    ggplot(merged_2009, aes(x=\"violent_arrest_rate_2009\", y=\"drug_arrest_rate_2009\"))\n",
    "    + geom_point()\n",
    "    + geom_smooth(method=\"lm\")\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing with 2018 Arrests\n",
    "\n",
    "And now the part that will likely be homework!\n",
    "\n",
    "Showing that drug arrests and violent crime arrests tend to be positively correlated does not tell us much about whether they are *causally* relation. It *could* be the case that people dealing drugs *causes* more violent crime, but it could also be that certain communities, for some other reason, tend to have *both* more drug sales *and* more violent crime. \n",
    "\n",
    "So to test for this, we went to see if the same communities that had violent crime in 2009 *also* have violent crime in 2019 (after marijuana legalization). If these communities have just as much crime in 2018, that would suggest that violent crime is being driven by a third factor, and not drug sales of marijuana. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(12)** Just as we created violent arrest rates and drug arrest rates for 2009, now we want to do it for 2018. Using the data on 2018 arrests (also in the [same repository](https://github.com/nickeubank/practicaldatascience/tree/master/Example_Data/ca) we used before) and the same dataset of population data (you'll have to use population from 2013-2017, as 2018 population data has yet to be released), create a dataset of arrest rates. \n",
    "\n",
    "As before, *be careful with your merges!!!*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "arrests_2018 = pd.read_csv(\n",
    "    \"https://raw.githubusercontent.com/nickeubank/practicaldatascience/\"\n",
    "    \"master/Example_Data/ca/ca_arrests_2018.csv\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>STATE</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>total_population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3488</th>\n",
       "      <td>267</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>Colorado</td>\n",
       "      <td>Garfield County</td>\n",
       "      <td>57945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2445</th>\n",
       "      <td>2445</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Tennessee</td>\n",
       "      <td>Cumberland County</td>\n",
       "      <td>52852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>948</th>\n",
       "      <td>948</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Kansas</td>\n",
       "      <td>Miami County</td>\n",
       "      <td>30511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>945</th>\n",
       "      <td>945</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Kansas</td>\n",
       "      <td>Marion County</td>\n",
       "      <td>12239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3353</th>\n",
       "      <td>132</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>Arkansas</td>\n",
       "      <td>Drew County</td>\n",
       "      <td>18620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5748</th>\n",
       "      <td>2527</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>Texas</td>\n",
       "      <td>Archer County</td>\n",
       "      <td>8793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1310</th>\n",
       "      <td>1310</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>Van Buren County</td>\n",
       "      <td>78026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1195</th>\n",
       "      <td>1195</td>\n",
       "      <td>2005-2009</td>\n",
       "      <td>Maryland</td>\n",
       "      <td>Baltimore County</td>\n",
       "      <td>786697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6078</th>\n",
       "      <td>2857</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>Virginia</td>\n",
       "      <td>Grayson County</td>\n",
       "      <td>15708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3585</th>\n",
       "      <td>364</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>Florida</td>\n",
       "      <td>Nassau County</td>\n",
       "      <td>78435</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0       YEAR      STATE             COUNTY  total_population\n",
       "3488         267  2013-2017   Colorado    Garfield County             57945\n",
       "2445        2445  2005-2009  Tennessee  Cumberland County             52852\n",
       "948          948  2005-2009     Kansas       Miami County             30511\n",
       "945          945  2005-2009     Kansas      Marion County             12239\n",
       "3353         132  2013-2017   Arkansas        Drew County             18620\n",
       "5748        2527  2013-2017      Texas      Archer County              8793\n",
       "1310        1310  2005-2009   Michigan   Van Buren County             78026\n",
       "1195        1195  2005-2009   Maryland   Baltimore County            786697\n",
       "6078        2857  2013-2017   Virginia     Grayson County             15708\n",
       "3585         364  2013-2017    Florida      Nassau County             78435"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop = pd.read_csv(\n",
    "    \"https://raw.githubusercontent.com/nickeubank/practicaldatascience\"\n",
    "    \"/master/Example_Data/ca/nhgis_county_populations.csv\"\n",
    ")\n",
    "pop.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0_x</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>VIOLENT</th>\n",
       "      <th>PROPERTY</th>\n",
       "      <th>F_DRUGOFF</th>\n",
       "      <th>F_SEXOFF</th>\n",
       "      <th>F_ALLOTHER</th>\n",
       "      <th>F_TOTAL</th>\n",
       "      <th>M_TOTAL</th>\n",
       "      <th>S_TOTAL</th>\n",
       "      <th>Unnamed: 0_y</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>STATE</th>\n",
       "      <th>total_population</th>\n",
       "      <th>_merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2210</td>\n",
       "      <td>Contra Costa County</td>\n",
       "      <td>2614</td>\n",
       "      <td>2740</td>\n",
       "      <td>796</td>\n",
       "      <td>146</td>\n",
       "      <td>2489</td>\n",
       "      <td>8785</td>\n",
       "      <td>16223</td>\n",
       "      <td>2</td>\n",
       "      <td>192</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>1123678</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2216</td>\n",
       "      <td>Imperial County</td>\n",
       "      <td>401</td>\n",
       "      <td>281</td>\n",
       "      <td>145</td>\n",
       "      <td>28</td>\n",
       "      <td>321</td>\n",
       "      <td>1176</td>\n",
       "      <td>4483</td>\n",
       "      <td>3</td>\n",
       "      <td>198</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>179957</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>2250</td>\n",
       "      <td>Siskiyou County</td>\n",
       "      <td>179</td>\n",
       "      <td>101</td>\n",
       "      <td>71</td>\n",
       "      <td>8</td>\n",
       "      <td>226</td>\n",
       "      <td>585</td>\n",
       "      <td>1643</td>\n",
       "      <td>0</td>\n",
       "      <td>232</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>43530</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2244</td>\n",
       "      <td>San Mateo County</td>\n",
       "      <td>1415</td>\n",
       "      <td>874</td>\n",
       "      <td>228</td>\n",
       "      <td>64</td>\n",
       "      <td>910</td>\n",
       "      <td>3491</td>\n",
       "      <td>13494</td>\n",
       "      <td>43</td>\n",
       "      <td>226</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>763450</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>2254</td>\n",
       "      <td>Sutter County</td>\n",
       "      <td>400</td>\n",
       "      <td>254</td>\n",
       "      <td>53</td>\n",
       "      <td>32</td>\n",
       "      <td>345</td>\n",
       "      <td>1084</td>\n",
       "      <td>3314</td>\n",
       "      <td>6</td>\n",
       "      <td>236</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>95583</td>\n",
       "      <td>both</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0_x               COUNTY  VIOLENT  PROPERTY  F_DRUGOFF  F_SEXOFF  \\\n",
       "6           2210  Contra Costa County     2614      2740        796       146   \n",
       "12          2216      Imperial County      401       281        145        28   \n",
       "46          2250      Siskiyou County      179       101         71         8   \n",
       "40          2244     San Mateo County     1415       874        228        64   \n",
       "50          2254        Sutter County      400       254         53        32   \n",
       "\n",
       "    F_ALLOTHER  F_TOTAL  M_TOTAL  S_TOTAL  Unnamed: 0_y       YEAR  \\\n",
       "6         2489     8785    16223        2           192  2013-2017   \n",
       "12         321     1176     4483        3           198  2013-2017   \n",
       "46         226      585     1643        0           232  2013-2017   \n",
       "40         910     3491    13494       43           226  2013-2017   \n",
       "50         345     1084     3314        6           236  2013-2017   \n",
       "\n",
       "         STATE  total_population _merge  \n",
       "6   California           1123678   both  \n",
       "12  California            179957   both  \n",
       "46  California             43530   both  \n",
       "40  California            763450   both  \n",
       "50  California             95583   both  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop2017 = pop[pop[\"YEAR\"] == \"2013-2017\"]\n",
    "ca_pop2017 = pop2017[pop2017.STATE == \"California\"].copy()\n",
    "\n",
    "ca_pop2017.loc[ca_pop2017.COUNTY == \"DelNorte County\", \"COUNTY\"] = \"Del Norte County\"\n",
    "ca_pop2017.loc[ca_pop2017.COUNTY == \"Injo County\", \"COUNTY\"] = \"Inyo County\"\n",
    "\n",
    "merged_2018 = pd.merge(\n",
    "    arrests_2018, ca_pop2017, on=\"COUNTY\", validate=\"1:1\", indicator=True, how=\"outer\"\n",
    ")\n",
    "merged_2018.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0_x</th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>VIOLENT</th>\n",
       "      <th>PROPERTY</th>\n",
       "      <th>F_DRUGOFF</th>\n",
       "      <th>F_SEXOFF</th>\n",
       "      <th>F_ALLOTHER</th>\n",
       "      <th>F_TOTAL</th>\n",
       "      <th>M_TOTAL</th>\n",
       "      <th>S_TOTAL</th>\n",
       "      <th>Unnamed: 0_y</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>STATE</th>\n",
       "      <th>total_population</th>\n",
       "      <th>_merge</th>\n",
       "      <th>violent_arrest_rate_2018</th>\n",
       "      <th>drug_arrest_rate_2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2204</td>\n",
       "      <td>Alameda County</td>\n",
       "      <td>4132</td>\n",
       "      <td>3051</td>\n",
       "      <td>1062</td>\n",
       "      <td>173</td>\n",
       "      <td>2619</td>\n",
       "      <td>11037</td>\n",
       "      <td>28305</td>\n",
       "      <td>82</td>\n",
       "      <td>186</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>1629615</td>\n",
       "      <td>both</td>\n",
       "      <td>0.002536</td>\n",
       "      <td>0.000652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2205</td>\n",
       "      <td>Alpine County</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>187</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>1203</td>\n",
       "      <td>both</td>\n",
       "      <td>0.004156</td>\n",
       "      <td>0.000831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2206</td>\n",
       "      <td>Amador County</td>\n",
       "      <td>72</td>\n",
       "      <td>40</td>\n",
       "      <td>31</td>\n",
       "      <td>3</td>\n",
       "      <td>142</td>\n",
       "      <td>288</td>\n",
       "      <td>701</td>\n",
       "      <td>1</td>\n",
       "      <td>188</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>37306</td>\n",
       "      <td>both</td>\n",
       "      <td>0.001930</td>\n",
       "      <td>0.000831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2207</td>\n",
       "      <td>Butte County</td>\n",
       "      <td>785</td>\n",
       "      <td>437</td>\n",
       "      <td>229</td>\n",
       "      <td>47</td>\n",
       "      <td>741</td>\n",
       "      <td>2239</td>\n",
       "      <td>8853</td>\n",
       "      <td>1</td>\n",
       "      <td>189</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>225207</td>\n",
       "      <td>both</td>\n",
       "      <td>0.003486</td>\n",
       "      <td>0.001017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2208</td>\n",
       "      <td>Calaveras County</td>\n",
       "      <td>147</td>\n",
       "      <td>42</td>\n",
       "      <td>29</td>\n",
       "      <td>6</td>\n",
       "      <td>96</td>\n",
       "      <td>320</td>\n",
       "      <td>897</td>\n",
       "      <td>0</td>\n",
       "      <td>190</td>\n",
       "      <td>2013-2017</td>\n",
       "      <td>California</td>\n",
       "      <td>45057</td>\n",
       "      <td>both</td>\n",
       "      <td>0.003263</td>\n",
       "      <td>0.000644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0_x            COUNTY  VIOLENT  PROPERTY  F_DRUGOFF  F_SEXOFF  \\\n",
       "0          2204    Alameda County     4132      3051       1062       173   \n",
       "1          2205     Alpine County        5         2          1         0   \n",
       "2          2206     Amador County       72        40         31         3   \n",
       "3          2207      Butte County      785       437        229        47   \n",
       "4          2208  Calaveras County      147        42         29         6   \n",
       "\n",
       "   F_ALLOTHER  F_TOTAL  M_TOTAL  S_TOTAL  Unnamed: 0_y       YEAR       STATE  \\\n",
       "0        2619    11037    28305       82           186  2013-2017  California   \n",
       "1           3       11       41        0           187  2013-2017  California   \n",
       "2         142      288      701        1           188  2013-2017  California   \n",
       "3         741     2239     8853        1           189  2013-2017  California   \n",
       "4          96      320      897        0           190  2013-2017  California   \n",
       "\n",
       "   total_population _merge  violent_arrest_rate_2018  drug_arrest_rate_2018  \n",
       "0           1629615   both                  0.002536               0.000652  \n",
       "1              1203   both                  0.004156               0.000831  \n",
       "2             37306   both                  0.001930               0.000831  \n",
       "3            225207   both                  0.003486               0.001017  \n",
       "4             45057   both                  0.003263               0.000644  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_2018[\"violent_arrest_rate_2018\"] = (\n",
    "    merged_2018[\"VIOLENT\"] / merged_2018[\"total_population\"]\n",
    ")\n",
    "merged_2018[\"drug_arrest_rate_2018\"] = (\n",
    "    merged_2018[\"F_DRUGOFF\"] / merged_2018[\"total_population\"]\n",
    ")\n",
    "merged_2018.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(13)** Now merge the two county-level datasets so you have one row for every county, and variables for violent arrest rates in 2018, violent arrest rates in 2009, felony drug arrest rates in 2018, and felony drug arrest rates in 2009. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "both          58\n",
       "left_only      0\n",
       "right_only     0\n",
       "Name: _merge, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_thinned_2009 = merged_2009[\n",
    "    [\"COUNTY\", \"violent_arrest_rate_2009\", \"drug_arrest_rate_2009\", \"total_population\"]\n",
    "]\n",
    "merged_thinned_2018 = merged_2018[\n",
    "    [\"COUNTY\", \"violent_arrest_rate_2018\", \"drug_arrest_rate_2018\", \"total_population\"]\n",
    "]\n",
    "\n",
    "merged_thinned_2009 = merged_thinned_2009.rename(\n",
    "    {\"total_population\": \"total_population_2009\"}, axis=\"columns\"\n",
    ")\n",
    "merged_thinned_2018 = merged_thinned_2018.rename(\n",
    "    {\"total_population\": \"total_population_2018\"}, axis=\"columns\"\n",
    ")\n",
    "\n",
    "all_years = pd.merge(\n",
    "    merged_thinned_2009,\n",
    "    merged_thinned_2018,\n",
    "    on=\"COUNTY\",\n",
    "    validate=\"1:1\",\n",
    "    indicator=True,\n",
    ")\n",
    "all_years._merge.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTY</th>\n",
       "      <th>violent_arrest_rate_2009</th>\n",
       "      <th>drug_arrest_rate_2009</th>\n",
       "      <th>total_population_2009</th>\n",
       "      <th>violent_arrest_rate_2018</th>\n",
       "      <th>drug_arrest_rate_2018</th>\n",
       "      <th>total_population_2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Trinity County</td>\n",
       "      <td>0.004669</td>\n",
       "      <td>0.004525</td>\n",
       "      <td>13922</td>\n",
       "      <td>0.005139</td>\n",
       "      <td>0.005753</td>\n",
       "      <td>13037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Solano County</td>\n",
       "      <td>0.003934</td>\n",
       "      <td>0.003498</td>\n",
       "      <td>406461</td>\n",
       "      <td>0.003439</td>\n",
       "      <td>0.001113</td>\n",
       "      <td>434981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Placer County</td>\n",
       "      <td>0.002144</td>\n",
       "      <td>0.002373</td>\n",
       "      <td>332059</td>\n",
       "      <td>0.002037</td>\n",
       "      <td>0.000632</td>\n",
       "      <td>374985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Plumas County</td>\n",
       "      <td>0.004866</td>\n",
       "      <td>0.005061</td>\n",
       "      <td>20550</td>\n",
       "      <td>0.004166</td>\n",
       "      <td>0.001389</td>\n",
       "      <td>18724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Kern County</td>\n",
       "      <td>0.005493</td>\n",
       "      <td>0.004251</td>\n",
       "      <td>780953</td>\n",
       "      <td>0.003883</td>\n",
       "      <td>0.000843</td>\n",
       "      <td>878744</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            COUNTY  violent_arrest_rate_2009  drug_arrest_rate_2009  \\\n",
       "52  Trinity County                  0.004669               0.004525   \n",
       "47   Solano County                  0.003934               0.003498   \n",
       "30   Placer County                  0.002144               0.002373   \n",
       "31   Plumas County                  0.004866               0.005061   \n",
       "14     Kern County                  0.005493               0.004251   \n",
       "\n",
       "    total_population_2009  violent_arrest_rate_2018  drug_arrest_rate_2018  \\\n",
       "52                  13922                  0.005139               0.005753   \n",
       "47                 406461                  0.003439               0.001113   \n",
       "30                 332059                  0.002037               0.000632   \n",
       "31                  20550                  0.004166               0.001389   \n",
       "14                 780953                  0.003883               0.000843   \n",
       "\n",
       "    total_population_2018  \n",
       "52                  13037  \n",
       "47                 434981  \n",
       "30                 374985  \n",
       "31                  18724  \n",
       "14                 878744  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_years = all_years.drop(\"_merge\", axis=\"columns\")\n",
    "all_years.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(14)** Did drug arrests go down from 2009 to 2018? (they sure better! This is what's called a \"sanity check\" of your data and analysis. If you find drug arrests went *up*, you know something went wrong with your code or your understanding of the situations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.0022133472788366236"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_years[\"change_in_drug_2018_2009\"] = (\n",
    "    all_years.drug_arrest_rate_2018 - all_years.drug_arrest_rate_2009\n",
    ")\n",
    "all_years[\"change_in_drug_2018_2009\"].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So rates declined by 0.0022 arrests per capita. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(15)** Now we want to look at whether violent crime decreased following drug legalization. Did the average violent arrest rate decrease? By how much? (Note: We're assuming that arrest rates are proportionate to crime rates. If policing increased so that there were more arrests per crime committed, that would impact our interpretation of these results. But this is just an exercise, so...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_years[\"change_in_violent_2018_2009\"] = (\n",
    "    all_years.violent_arrest_rate_2018 - all_years.violent_arrest_rate_2009\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.00028268480439183743"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_years[\"change_in_violent_2018_2009\"].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So rates declined by 0.00028 arrests per capita. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(16)** So we've determined that both drug arrests and violent crime arrests were decreasing over this period. But maybe *all* crime was just falling, and this isn't about drug legalization. \n",
    "\n",
    "This is the problem with a \"pre-to-post\" analysis: yes, our results are *consistent* with the idea that drug legalization reduced violent crime, but lots of things happened between 2009 and 2018, not just drug legalization, so we don't know that drug legalization *caused* the decline in violent crime. \n",
    "\n",
    "So let's do a kind of difference-in-difference analysis. We know that drug legalization should have had a bigger effect on counties that had higher drug arrest rates prior to drug legalization. After all, in a county that had no drug arrests, legalization wouldn't do anything, would it? \n",
    "\n",
    "So let's split our sample into two groups: high drug arrests in 2009, and low drug arrests in 2009 (cut the sample at the average drug arrest rate in 2009). \n",
    "\n",
    "Now we can ask: did violent crime fall *more* from 2009 to 2018 in the counties that had lots of drug arrests in 2009 (where legalization likely had more of an effect) than in counties with fewer drug arrests in 2009 (where legalization likely mattered less)? Calculate this difference-in-differences:\n",
    "\n",
    "(the change in violent crime rate for counties with lots of drug arrests in 2009) - (the change in violent crime rate for counties with few drug arrests in 2009)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    58.000000\n",
       "mean      0.003191\n",
       "std       0.001448\n",
       "min       0.001017\n",
       "25%       0.002311\n",
       "50%       0.002800\n",
       "75%       0.003944\n",
       "max       0.008613\n",
       "Name: drug_arrest_rate_2009, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_years.drug_arrest_rate_2009.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_years[\"high_drug_2009\"] = (\n",
    "    all_years.drug_arrest_rate_2009 > all_years.drug_arrest_rate_2009.mean()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.00043197415958967417"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "change_from_09_to_18_in_high_drug_arrest_counties = all_years.loc[\n",
    "    all_years.high_drug_2009, \"change_in_violent_2018_2009\"\n",
    "].mean()\n",
    "change_from_09_to_18_in_high_drug_arrest_counties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.00018458037097611614"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "change_from_09_to_18_in_low_drug_arrest_counties = all_years.loc[\n",
    "    ~all_years.high_drug_2009, \"change_in_violent_2018_2009\"\n",
    "].mean()\n",
    "change_from_09_to_18_in_low_drug_arrest_counties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "dif_in_dif = (\n",
    "    change_from_09_to_18_in_high_drug_arrest_counties\n",
    "    - change_from_09_to_18_in_low_drug_arrest_counties\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.000247393788613558"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dif_in_dif\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So arrest rates declined by 0.000247 arrests per capita *more* in counties that had previously had high drug arrest rates than in counties that had previously had low drug arrest rates. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(17)** Hmmm... we showed that there was a greater *absolute* decline in violent arrest rates in counties more impacted by drug legalization. But was there also a greater *proportionate* decline?\n",
    "\n",
    "Calculate:\n",
    "\n",
    "(the percentage change in violent crime rate for counties with lots of drug arrests in 2009) - (the percentage change in violent crime rate for counties with few drug arrests in 2009)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We could also do in percentage terms\n",
    "all_years[\"pct_change_in_violent_2018_2009\"] = (\n",
    "    all_years.violent_arrest_rate_2018 - all_years.violent_arrest_rate_2009\n",
    ") / all_years.violent_arrest_rate_2009\n",
    "pct_change_from_09_to_18_in_high_drug_arrest_counties = all_years.loc[\n",
    "    all_years.high_drug_2009, \"pct_change_in_violent_2018_2009\"\n",
    "].mean()\n",
    "pct_change_from_09_to_18_in_low_drug_arrest_counties = all_years.loc[\n",
    "    ~all_years.high_drug_2009, \"pct_change_in_violent_2018_2009\"\n",
    "].mean()\n",
    "pct_dif_in_dif = (\n",
    "    pct_change_from_09_to_18_in_high_drug_arrest_counties\n",
    "    - pct_change_from_09_to_18_in_low_drug_arrest_counties\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.04913794186222824"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pct_dif_in_dif\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So arrest rates declined by an additional 4.9% in arrests per capita in counties that had previously had high drug arrest rates than in counties that had previously had low drug arrest rates. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.6 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "718fed28bf9f8c7851519acf2fb923cd655120b36de3b67253eeb0428bd33d2d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
